-- MySQL Script generated by MySQL Workbench
-- 02/11/15 17:31:49
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema hollyhotel
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `hollyhotel` ;

-- -----------------------------------------------------
-- Schema hollyhotel
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `hollyhotel` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `hollyhotel` ;

-- -----------------------------------------------------
-- Table `CUSTOMER`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CUSTOMER` ;

CREATE TABLE IF NOT EXISTS `hollyhotel`.`CUSTOMER` (
  `CustomerID` INT NOT NULL AUTO_INCREMENT COMMENT 'Surrogate Key',
  `CustomerType` VARCHAR(1) NOT NULL DEFAULT 'C' COMMENT '(C)ustomer or (O)rganization\n--Possibly convert this over to Name_Type?',
  `FirstName` VARCHAR(30) NOT NULL COMMENT 'Required when this is a Customer  Record',
  `LastName` VARCHAR(30) NOT NULL COMMENT 'Required for a Customer Record',
  `OrganizationName` VARCHAR(45) NOT NULL COMMENT 'Required when the type is organization',
  `ContactInfoConfidential` TINYINT(1) NULL DEFAULT 0 COMMENT 'Column used to note if the Customers want to keep their information confidential from outside parties',
  `Primary_Organization_Contact` INT NULL COMMENT 'If the \"Customer\" is an organization, then require a contact (points to another Customer Record)',
  PRIMARY KEY (`CustomerID`),
  INDEX `Organization_PrimaryContactID_idx` (`Primary_Organization_Contact` ASC),
  UNIQUE INDEX `CUSTOMER_AK1` (`FirstName` ASC, `LastName` ASC, `OrganizationName` ASC),
  CONSTRAINT `Organization_PrimaryContactID_FK`
    FOREIGN KEY (`Primary_Organization_Contact`)
    REFERENCES `hollyhotel`.`CUSTOMER` (`CustomerID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Table contains the primary information for a customer or org' /* comment truncated */ /*anization*/;

#customerCREATE INDEX `Organization_PrimaryContactID_idx` ON `CUSTOMER` (`Primary_Organization_Contact` ASC);



-- -----------------------------------------------------
-- Table `PHONE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `PHONE` ;

CREATE TABLE IF NOT EXISTS `PHONE` (
  `CustomerID` INT NOT NULL COMMENT 'Foreign key, pointing to the master customer record',
  `PhoneNumSeq` INT NOT NULL DEFAULT 0 COMMENT '0 = Main, 1 = Office, 2 = Cell? -- (Possibly move this over to the Type_Name table)',
  `PhoneNum` VARCHAR(10) NULL COMMENT 'Actual Phone number, removing the dashes.  number must be between 1001000000-9999999999',
  PRIMARY KEY (`CustomerID`, `PhoneNumSeq`),
  CONSTRAINT `PHONE_CUSTOMERID_FK`
    FOREIGN KEY (`CustomerID`)
    REFERENCES `CUSTOMER` (`CustomerID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Contains the multiple phone numbers that a customer may have';

CREATE INDEX `PHONE_CUSTOMERID_FK_idx` ON `PHONE` (`CustomerID` ASC);


-- -----------------------------------------------------
-- Table `ADDRESS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ADDRESS` ;

CREATE TABLE IF NOT EXISTS `ADDRESS` (
  `CustomerID` INT NOT NULL COMMENT 'Foreign key, pointing to the master customer record',
  `AddressSeq` INT NOT NULL DEFAULT 0 COMMENT '0 = Bill-to, 1 = Alternate?  - - (Possibly move this over to the Type_Name table)',
  `Address1` VARCHAR(45) NULL COMMENT 'Street Address Line 1',
  `Address2` VARCHAR(45) NULL COMMENT 'Street Address Line 2',
  `Address3` VARCHAR(45) NULL COMMENT 'Street Address Line 3',
  `Address4` VARCHAR(45) NULL COMMENT 'Street Address Line 4',
  `City` VARCHAR(45) NULL,
  `State` VARCHAR(3) NULL COMMENT 'State Abbreviation',
  `Zip` VARCHAR(10) NULL,
  `Country` VARCHAR(45) NULL,
  PRIMARY KEY (`CustomerID`, `AddressSeq`),
  CONSTRAINT `PHONE_CUSTOMERID_FK0`
    FOREIGN KEY (`CustomerID`)
    REFERENCES `CUSTOMER` (`CustomerID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'Contains the multiple addresses that a customer may have';

CREATE INDEX `PHONE_CUSTOMERID_FK_idx` ON `ADDRESS` (`CustomerID` ASC);


-- -----------------------------------------------------
-- Table `EVENT`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `EVENT` ;

CREATE TABLE IF NOT EXISTS `EVENT` (
  `EventID` INT NOT NULL AUTO_INCREMENT COMMENT 'Surrogate Key used to uniquely identify an event',
  `EventName` VARCHAR(45) NOT NULL COMMENT 'Name of the event (Bob and Jill\'s Wedding)',
  `HostID` INT NOT NULL COMMENT 'Field to hold the primary contact for the event',
  `StartDate` DATETIME NOT NULL COMMENT 'When the event is supposed to take place (used in calculating room reservations for blocks of rooms)',
  `EndDate` DATETIME NOT NULL COMMENT 'When the event concludes (used in calculating room reservations for blocks of rooms)',
  `RoomsReserved` INT(11) NOT NULL DEFAULT 0 COMMENT 'Holds the number rooms that are held for guests associated with this event to convert into actual reservations.  This number will  be decremented as Guests for this event create reservations',
  `RoomsReservedUntil` DATETIME NOT NULL COMMENT 'This field is used to tell the reservation system how long to keep the Rooms Reserved before allowing other guests to make reservations.  Possibly use a trigger to default this to two weeks prior to StartDate',
  PRIMARY KEY (`EventID`),
  CONSTRAINT `EVENT_HostID_FK`
    FOREIGN KEY (`HostID`)
    REFERENCES `CUSTOMER` (`CustomerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'This Table contains the information for an event such as a W' /* comment truncated */ /*edding, corportate meeting, etc
An event requires at least one primary reservation of a room (meeting or sleeping)*/;

CREATE INDEX `fk_EVENT_CUSTOMER1_idx` ON `EVENT` (`HostID` ASC);


-- -----------------------------------------------------
-- Table `TYPE_NAME`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TYPE_NAME` ;

CREATE TABLE IF NOT EXISTS `TYPE_NAME` (
  `TypeNameID` INT NOT NULL AUTO_INCREMENT COMMENT 'Auto assigned surrogate key',
  `UsageID` VARCHAR(20) NOT NULL COMMENT 'Used to filter the categories by their usage.  i.e. BuildingID, WingID, BedType',
  `Name` VARCHAR(45) NOT NULL COMMENT 'Descriptive field of the different types (King Bed, Queen, etc.)',
  `UsageRank` INT NULL DEFAULT 0 COMMENT 'Used for sorting, or ranking for subsitution (King bed is better than a Queen Bed)',
  PRIMARY KEY (`TypeNameID`, `UsageID`))
ENGINE = InnoDB
COMMENT = 'This is a lookup table holds all of the Categories that can ' /* comment truncated */ /*be assigned, along with the names that are used for the Buildings/ Wings, etc*/;


-- -----------------------------------------------------
-- Table `BUILDING_WING`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BUILDING_WING` ;

CREATE TABLE IF NOT EXISTS `BUILDING_WING` (
  `BuildingID` INT NOT NULL COMMENT 'Building ID, Foreign Key that is maintained in Type_Name with a Usage of BuildingID',
  `WingID` INT NOT NULL COMMENT 'Wing ID, Foreign Key that is maintained in Type_Name with a UsageID of WingID',
  `NumberOfFloors` INT NOT NULL DEFAULT 1 COMMENT 'Number of Floors that the wing has.  Must be one or more',
  PRIMARY KEY (`BuildingID`, `WingID`),
  CONSTRAINT `BUILDING_WING_BuildingID_FK`
    FOREIGN KEY (`BuildingID`)
    REFERENCES `TYPE_NAME` (`TypeNameID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `BUILDING_WING_WingID_FK`
    FOREIGN KEY (`WingID`)
    REFERENCES `TYPE_NAME` (`TypeNameID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Assigns Wings to Buildings, as Wings can be used in multiple' /* comment truncated */ /* buildings (West, East, etc.)*/;

CREATE INDEX `fk_BUILDING_WING_TYPE_NAME1_idx` ON `BUILDING_WING` (`WingID` ASC);


-- -----------------------------------------------------
-- Table `WING_FLOOR`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `WING_FLOOR` ;

CREATE TABLE IF NOT EXISTS `WING_FLOOR` (
  `BuildingID` INT NOT NULL COMMENT 'Foreign Key pointing to Building_WING',
  `WingID` INT NOT NULL COMMENT 'Foreign Key pointing to Building_WING',
  `FloorNumber` INT NOT NULL COMMENT '>=1 and <= BUILDING_WING.NumberOfFloors',
  `SmokingProhibited` TINYINT(1) NULL DEFAULT 0 COMMENT 'Marks all rooms on this Floor/Wing/Building combination on Non-smoking',
  PRIMARY KEY (`WingID`, `FloorNumber`, `BuildingID`),
  CONSTRAINT `WING_FLOOR_Building_FK`
    FOREIGN KEY (`BuildingID` , `WingID`)
    REFERENCES `BUILDING_WING` (`BuildingID` , `WingID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'This table Maintains information that is specific to a floor' /* comment truncated */ /* that exists in a building/wing.  Rooms are then assigned to this Building/Wing/Floor combination*/;

CREATE INDEX `WING_FLOOR_Building_FK_idx` ON `WING_FLOOR` (`BuildingID` ASC, `WingID` ASC);

-- -----------------------------------------------------
-- Table `ROOM`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ROOM` ;

CREATE TABLE IF NOT EXISTS `ROOM` (
  `RoomID` INT NOT NULL AUTO_INCREMENT COMMENT 'Surrogate key that uniquely defines the room',
  `RoomNumber` INT NOT NULL COMMENT 'Room Number for the specific Building/Wing/Floor - This is the friendly number shown to users/guests',
  `Floor` INT NOT NULL COMMENT 'Floor that the room belongs to',
  `WingID` INT NOT NULL COMMENT 'Wing that the room belongs to',
  `BuildingID` INT NOT NULL COMMENT 'Building that the room belongs to',
  `ParentRoomID` INT NULL COMMENT 'Used when Multiple rooms can be combined into a single room/reservation',
  PRIMARY KEY (`RoomID`),
  CONSTRAINT `ROOM_ParentRoomID_FK`
    FOREIGN KEY (`ParentRoomID`)
    REFERENCES `ROOM` (`RoomID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `ROOM_WING_FLOOR_FK`
    FOREIGN KEY (`WingID`, `Floor`, `BuildingID`)
    REFERENCES WING_FLOOR(`WingID`, `FloorNumber`, `BuildingID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT
    )
ENGINE = InnoDB
COMMENT = 'Table that maintains all of the possible rooms.  ';

CREATE INDEX `fk_ROOM_ROOM1_idx` ON `ROOM` (`ParentRoomID` ASC);

CREATE UNIQUE INDEX `ROOM_ak1` ON `ROOM` (`RoomNumber` ASC, `Floor` ASC, `WingID` ASC, `BuildingID` ASC);

CREATE INDEX `ROOM_WING_FLOOR_FK_idx` ON `ROOM` (`Floor` ASC, `WingID` ASC, `BuildingID` ASC);


-- -----------------------------------------------------
-- Table `RESERVATION`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `RESERVATION` ;

CREATE TABLE IF NOT EXISTS `RESERVATION` (
  `ReservationID` INT NOT NULL AUTO_INCREMENT COMMENT 'Surrogate Key to uniquely identify the reservation',
  `ParentResID` INT NULL COMMENT 'Allows the creation of a primary reservation that then can have multiple reservations assigned ',
  `BillToID` INT NOT NULL COMMENT 'The customer that will be responsible for paying for the room',
  `GuestID` INT NULL COMMENT 'The customer that will be checking in and using the room\nIf this field is null, then use BillToID; this is only specified when the another \"customer\" is responible for paying for the room charges',
  `EventID` INT NULL COMMENT 'Used to validate group/event reservations',
  `RoomType` INT NOT NULL COMMENT 'Uses lookup table Type_Name with a UsageID of RoomType',
  `StartDate` DATETIME NOT NULL COMMENT 'Check-In Date',
  `EndDate` DATETIME NOT NULL COMMENT 'Check-out Date',
  `Rate` DECIMAL(12,2) NULL DEFAULT 0 COMMENT 'Room Rate that will be charged for the reservation ',
  `Deposit` DECIMAL(12,2) NULL COMMENT 'For Customers required to pre-pay',
  `RoomID` INT NULL COMMENT 'Used when a specific room is booked; Neccessary for booking Meeting Rooms',
  `Smoking` INT NULL COMMENT '0 = No, 1 = Yes, 2 = No Preference',
  `ConvertedToStay` TINYINT(1) NULL DEFAULT 0 COMMENT 'Marks when a reservation is converted to a stay, so that the scheduling system can ignore it',
  PRIMARY KEY (`ReservationID`),
  CONSTRAINT `RESERVATION_BillToID_FK`
    FOREIGN KEY (`BillToID`)
    REFERENCES `CUSTOMER` (`CustomerID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `RESERVATION_GuestID_FK`
    FOREIGN KEY (`GuestID`)
    REFERENCES `CUSTOMER` (`CustomerID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `RESERVATION_EventID_FK`
    FOREIGN KEY (`EventID`)
    REFERENCES `EVENT` (`EventID`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `RESERVATION_RoomID`
    FOREIGN KEY (`RoomID`)
    REFERENCES `ROOM` (`RoomID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Table that stores the information neccessary to make a room ' /* comment truncated */ /*reservation*/;

CREATE INDEX `fk_RESERVATION_CUSTOMER1_idx` ON `RESERVATION` (`BillToID` ASC);

CREATE INDEX `fk_RESERVATION_CUSTOMER1_idx1` ON `RESERVATION` (`GuestID` ASC);

CREATE INDEX `fk_RESERVATION_EVENT1_idx` ON `RESERVATION` (`EventID` ASC);

CREATE INDEX `fk_RESERVATION_ROOM1_idx` ON `RESERVATION` (`RoomID` ASC);


-- -----------------------------------------------------
-- Table `ROOM_BEDS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ROOM_BEDS` ;

CREATE TABLE IF NOT EXISTS `ROOM_BEDS` (
  `RoomID` INT NOT NULL,
  `BedSequence` INT NOT NULL,
  `BedType` INT NOT NULL,
  PRIMARY KEY (`RoomID`, `BedSequence`),
  CONSTRAINT `BEDS_RoomID_FK`
    FOREIGN KEY (`RoomID`)
    REFERENCES `ROOM` (`RoomID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `BEDS_TYPE_BedType_FK`
    FOREIGN KEY (`BedType`)
    REFERENCES `TYPE_NAME` (`TypeNameID`)
    ON DELETE NO ACTION
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Detail child table of rooms that specifies the types of beds' /* comment truncated */ /* that are (or in the case of meeting rooms, can be) part of the room's configuration*/;

CREATE INDEX `fk_BEDS_TYPE_NAME1_idx` ON `ROOM_BEDS` (`BedType` ASC);


-- -----------------------------------------------------
-- Table `ROOM_DETAIL`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ROOM_DETAIL` ;

CREATE TABLE IF NOT EXISTS `ROOM_DETAIL` (
  `RoomID` INT NOT NULL COMMENT 'Points to the Room record',
  `RoomType` INT NOT NULL COMMENT 'Type of room, such as Sleeping, Meeting, etc.  Foreign Key)',
  `Capacity` INT NOT NULL DEFAULT 0 COMMENT 'Meeting Room this is Seating Capacity\nSleeping Room this is Sleeping Capacity',
  `Toliet` TINYINT(1) NULL COMMENT 'Only required if the Room Type is Meeting',
  `PermitSmoking` TINYINT(1) NULL DEFAULT 0 COMMENT 'Used if a specific room permits smoking; this will be used in conjunction with the floor setting. This is only required for sleeping rooms',
  `ExtraSpace` INT NULL COMMENT 'Sleeping Room Specific setting,',
  `Rate` DECIMAL(12,2) NOT NULL DEFAULT 0 COMMENT 'Suites/Sleeping this is the daily rate\nMeeting Rooms this is the Hourly Rate',
  PRIMARY KEY (`RoomID`, `RoomType`),
  INDEX `ROOM_DETAIL_RoomType_FK_idx` (`RoomType` ASC),
  CONSTRAINT `ROOM_DETAIL_RoomID_FK`
    FOREIGN KEY (`RoomID`)
    REFERENCES `hollyhotel`.`ROOM` (`RoomID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ROOM_DETAIL_RoomType_FK`
    FOREIGN KEY (`RoomType`)
    REFERENCES `hollyhotel`.`TYPE_NAME` (`TypeNameID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Contains the specific information based on the type of prope' /* comment truncated */ /*rties that a room will have depending on the room type.  Room Requires at least one assignment (business logic)*/;


CREATE INDEX `ROOM_DETAIL_RoomType_FK_idx` ON `ROOM_DETAIL` (`RoomType` ASC);


-- -----------------------------------------------------
-- Table `ROOM_ADJ`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ROOM_ADJ` ;

CREATE TABLE IF NOT EXISTS `ROOM_ADJ` (
  `RoomID` INT NOT NULL COMMENT 'Primary Room ID',
  `AdjacentRoomID` INT NOT NULL COMMENT 'Adjacent Room ID',
  PRIMARY KEY (`RoomID`, `AdjacentRoomID`),
  CONSTRAINT `ROOM_ADJ_RoomID_FK`
    FOREIGN KEY (`RoomID`)
    REFERENCES `ROOM` (`RoomID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `ROOM_ADJ_AdjacentRoomID_FK`
    FOREIGN KEY (`AdjacentRoomID`)
    REFERENCES `ROOM` (`RoomID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'This table is used to define when a room is adjacent to anot' /* comment truncated */ /*her room.  In the case of sleeping rooms, there should only be one adjacancy, while in meeting, there can be multiple (business logic)*/;

CREATE INDEX `fk_ROOM_ADJ_ROOM1_idx` ON `ROOM_ADJ` (`AdjacentRoomID` ASC);


-- -----------------------------------------------------
-- Table `RESERVATION_MEALS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `RESERVATION_MEALS` ;

CREATE TABLE IF NOT EXISTS `RESERVATION_MEALS` (
  `ReservationID` INT NOT NULL COMMENT 'Foreign Key to the Reservation',
  `Date` DATETIME NOT NULL COMMENT 'Date/Time of the requested meal',
  `MealID` INT NOT NULL COMMENT 'Meal Type (as souced in Type_Name); i.e. BreakFast, Lunch',
  `ServiceFor` INT NULL COMMENT 'Number of Guests that the meal will need to serve',
  PRIMARY KEY (`ReservationID`, `Date`, `MealID`),
  CONSTRAINT `RESERVATION_MEALS_RESERVATIONID_FK`
    FOREIGN KEY (`ReservationID`)
    REFERENCES `RESERVATION` (`ReservationID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `RESERVATION_MEALS_MealID_FK`
    FOREIGN KEY (`MealID`)
    REFERENCES `TYPE_NAME` (`TypeNameID`)
    ON DELETE NO ACTION
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Associates Meals reserved for events with a reservation, and' /* comment truncated */ /* provides the neccessary detail.  Details about the meals to be served are not being stored inside this system.*/;

CREATE INDEX `fk_RESERVATION_MEALS_TYPE_NAME1_idx` ON `RESERVATION_MEALS` (`MealID` ASC);


-- -----------------------------------------------------
-- Table `RES_FEATURES`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `RES_FEATURES` ;

CREATE TABLE IF NOT EXISTS `RES_FEATURES` (
  `ReservationID` INT NOT NULL COMMENT 'Correlates this record to the parent reservation record',
  `FeatureSequence` INT NOT NULL COMMENT 'This field allows assignment of multiple features and beds to the reservation',
  `BedFeatureID` INT NOT NULL COMMENT 'This field defines the customers requirements for features or beds, which will use a filtered view of the TYPE_NAME lookup table',
  `ProximityID` INT NULL COMMENT 'Specifies the maximum proximity to feature the customer would prefer.  Used only in features (not for Beds)',
  PRIMARY KEY (`ReservationID`, `FeatureSequence`),
  CONSTRAINT `RES_FEATURES_ReservationID_FK`
    FOREIGN KEY (`ReservationID`)
    REFERENCES `RESERVATION` (`ReservationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `RES_FEATURES_BedFeatureID_FK`
    FOREIGN KEY (`BedFeatureID`)
    REFERENCES `TYPE_NAME` (`TypeNameID`)
    ON DELETE NO ACTION
    ON UPDATE RESTRICT,
  CONSTRAINT `RES_FEATURES_ProximityID`
    FOREIGN KEY (`ProximityID`)
    REFERENCES `TYPE_NAME` (`TypeNameID`)
    ON DELETE NO ACTION
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'This table holds all of the requirements that a customer has' /* comment truncated */ /* for a room.  This can include up to two beds, proximity to pools, loading dock, parking lot, etc.*/;

CREATE INDEX `fk_RES_BEDS_TYPE_NAME1_idx` ON `RES_FEATURES` (`BedFeatureID` ASC);

CREATE INDEX `RES_FEATURES_ProximityID_idx` ON `RES_FEATURES` (`ProximityID` ASC);


-- -----------------------------------------------------
-- Table `STAY`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `STAY` ;

CREATE TABLE IF NOT EXISTS `STAY` (
  `StayID` INT NOT NULL AUTO_INCREMENT COMMENT 'Surrogate Key; ',
  `BillToID` INT NOT NULL COMMENT 'The customer that will receive the room charges (Not Null)',
  `GuestID` INT NULL COMMENT 'Assigned to the occupant of the room, if it is different than the person who is responsible for paying for the room charges.',
  `ReservationID` INT NULL COMMENT 'Informational field that points back to the reservation that this record originated from.  Not required',
  `EventID` INT NULL COMMENT 'If the stay is part of an event, this value can be assigned.  Added to this table to find the responsible party',
  `RoomID` INT NOT NULL COMMENT 'Links the room to the reservation',
  `CheckIn` DATETIME NOT NULL COMMENT 'Time that that stay begins',
  `CheckOut` DATETIME NULL COMMENT 'Actual Checkout time',
  `AnticipatedCheckOut` DATETIME NULL COMMENT 'This column is used to all the scheduler to figure out when a room will be available again when it is currently being occupied.  When converted over from a Reservation, this is the CheckOut date',
  PRIMARY KEY (`StayID`),
  CONSTRAINT `STAY_BillToID_FK`
    FOREIGN KEY (`BillToID`)
    REFERENCES `CUSTOMER` (`CustomerID`)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION,
  CONSTRAINT `STAY_GuestID_FK`
    FOREIGN KEY (`GuestID`)
    REFERENCES `CUSTOMER` (`CustomerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `STAY_ReservationID_FK`
    FOREIGN KEY (`ReservationID`)
    REFERENCES `RESERVATION` (`ReservationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `STAY_EventID_FK`
    FOREIGN KEY (`EventID`)
    REFERENCES `EVENT` (`EventID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `STAY_RoomID_FK`
    FOREIGN KEY (`RoomID`)
    REFERENCES `ROOM` (`RoomID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'This table is used to store the details of the Stay.  A reco' /* comment truncated */ /*rd is created for each room that is checked out to a Guest.  Records can be created from a reservation, though they do not need to be*/;

CREATE INDEX `fk_STAY_CUSTOMER1_idx` ON `STAY` (`BillToID` ASC);

CREATE INDEX `fk_STAY_CUSTOMER1_idx1` ON `STAY` (`GuestID` ASC);

CREATE INDEX `fk_STAY_RESERVATION1_idx` ON `STAY` (`ReservationID` ASC);

CREATE INDEX `fk_STAY_EVENT1_idx` ON `STAY` (`EventID` ASC);

CREATE INDEX `fk_STAY_ROOM1_idx` ON `STAY` (`RoomID` ASC);


-- -----------------------------------------------------
-- Table `STAY_CHARGES`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `STAY_CHARGES` ;

CREATE TABLE IF NOT EXISTS `STAY_CHARGES` (
  `ChargeNum` INT NOT NULL AUTO_INCREMENT COMMENT 'Surrogate Key',
  `StayID` INT NOT NULL COMMENT 'Foreign Key, pointing to Stay',
  `ChargeTo` INT NOT NULL DEFAULT 0 COMMENT 'Specifies if this is a room charge or another service;  room charge  goes to the BillToID, all others go to the Guest',
  `ChargeType` INT NOT NULL COMMENT 'Describes the charge type, Room, Meal, etc. Types are maintained in TYPE_NAME',
  `ChargeDescription` VARCHAR(255) NULL COMMENT 'Note field about the reason for the charge',
  `Amount` DECIMAL(12,2) NOT NULL DEFAULT 0 COMMENT 'Actual Charge Amount',
  `ChargeDate` DATETIME NOT NULL COMMENT 'Date/Time that the charge was incurred',
  `DueDate` DATETIME NULL COMMENT 'Field to hold when the charge is due, which is normally the anticipated checkout date.  Used for determining the status of customers',
  `PaidDate` DATETIME NULL COMMENT 'Date that the charge was paid for',
  PRIMARY KEY (`ChargeNum`),
  CONSTRAINT `fk_STAY_CHARGES_STAY1`
    FOREIGN KEY (`StayID`)
    REFERENCES `STAY` (`StayID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `STAY_CHARGES_ChargeType_FK`
    FOREIGN KEY (`ChargeType`)
    REFERENCES `TYPE_NAME` (`TypeNameID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'This table logs all the charges that are accumulated against' /* comment truncated */ /* a stay/room*/;

CREATE INDEX `STAY_CHARGES_ChargeType_FK_idx` ON `STAY_CHARGES` (`ChargeType` ASC);


-- -----------------------------------------------------
-- Table `MAINTENANCE_TICKET`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `MAINTENANCE_TICKET` ;

CREATE TABLE IF NOT EXISTS `MAINTENANCE_TICKET` (
  `MaintTicketID` INT NOT NULL AUTO_INCREMENT COMMENT 'Surrogate Key to record the maintenance transaction',
  `RoomID` INT NOT NULL COMMENT 'Room that the maintenance will be performed on',
  `StartDate` DATETIME NOT NULL COMMENT 'When the maintenance window should start.  Reservation system will use this value to check availablility',
  `EndDate` DATETIME NULL COMMENT 'Used to record when the maintenance is actually complete.  Used to check availability when assigning rooms.',
  `AnticipatedEndDate` DATETIME NOT NULL COMMENT 'When the room should be available for use again; used for scheduling/reservations.  On Cleaning, this is set to 3:59',
  `MaintenanceType` INT NOT NULL COMMENT 'Description of the maintenance that is going to be perfomed.  Foreign key.',
  `TaskDescription` VARCHAR(255) NULL COMMENT 'Used to allow specific instructions to the employee who will be performing the maintenance',
  PRIMARY KEY (`MaintTicketID`),
  CONSTRAINT `MAINTENANCE_TICKET_RoomID_FK`
    FOREIGN KEY (`RoomID`)
    REFERENCES `ROOM` (`RoomID`)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION,
  CONSTRAINT `MAINTENANCE_TICKET_MaintenanceType_FK`
    FOREIGN KEY (`MaintenanceType`)
    REFERENCES `TYPE_NAME` (`TypeNameID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Maintains the record of maintenance events that occur on roo' /* comment truncated */ /*ms, including scheduled future maintenance, and cleanings.*/;

CREATE INDEX `fk_MAINTENANCE_TICKET_ROOM1_idx` ON `MAINTENANCE_TICKET` (`RoomID` ASC);

CREATE INDEX `MAINTENANCE_TICKET_MaintenanceType_FK_idx` ON `MAINTENANCE_TICKET` (`MaintenanceType` ASC);


-- -----------------------------------------------------
-- Table `MAINTENACE_LOG`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `MAINTENACE_LOG` ;

CREATE TABLE IF NOT EXISTS `MAINTENACE_LOG` (
  `LogID` INT NOT NULL AUTO_INCREMENT COMMENT 'Surrogate key to record the transaction',
  `MaintTicketID` INT NOT NULL COMMENT 'Foreign key to the parent Maintence_Ticket record',
  `MaintenaceDate` DATETIME NOT NULL COMMENT 'Date/time that the maintenance was performed',
  `EmployeeID` INT NOT NULL COMMENT 'Employee who performed the maintenance',
  `Notes` VARCHAR(255) NULL COMMENT 'Notes the employee enters about the maintenance',
  PRIMARY KEY (`LogID`, `MaintTicketID`),
  CONSTRAINT `MAINTENACE_LOG_MaintTicketID_FK`
    FOREIGN KEY (`MaintTicketID`)
    REFERENCES `MAINTENANCE_TICKET` (`MaintTicketID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Table used to record details of maintenance performed.  Each' /* comment truncated */ /* maintenance ticket could have multiple entries in the log*/;


-- -----------------------------------------------------
-- Table `EMPLOYEE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `EMPLOYEE` ;

CREATE TABLE IF NOT EXISTS `EMPLOYEE` (
  `EmployeeID` INT NOT NULL AUTO_INCREMENT COMMENT 'Surrogate Key',
  `FirstName` VARCHAR(45) NULL COMMENT 'Employee\'s First Name',
  `LastName` VARCHAR(45) NULL COMMENT 'Employee\'s Last name',
  `HireDate` DATETIME NULL COMMENT 'Date the Employee was hired',
  `JobTitle` VARCHAR(45) NULL COMMENT 'Title currently assigned to Employee --intentionally left open at this point',
  PRIMARY KEY (`EmployeeID`))
ENGINE = InnoDB
COMMENT = 'Simplified  table to record employee information';


-- -----------------------------------------------------
-- Table `CARD_ASSIGNMENT`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CARD_ASSIGNMENT` ;

CREATE TABLE IF NOT EXISTS `CARD_ASSIGNMENT` (
  `CardNumber` INT NOT NULL COMMENT 'Unique Number assigned to a Card.  Assumed that this is the number that is able to be read by the card readers (instead of a secondary number)',
  `CustomerID` INT NULL COMMENT 'When cards are assigned to a customer, this field will point to the customer',
  `EmployeeID` INT NULL COMMENT 'When a card is assigned to an employee, this points to the employee record',
  `AssignedDate` DATETIME NOT NULL COMMENT 'Date/time that the card was assigned to the guest/employee',
  `ExpirationDate` DATETIME NULL COMMENT 'When card is returned/reported lost/stolen.',
  PRIMARY KEY ( `CardNumber`),
  CONSTRAINT `CARD_ASSIGNMENT_CustomerID_FK`
    FOREIGN KEY (`CustomerID`)
    REFERENCES `CUSTOMER` (`CustomerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `CARD_ASSIGNMENT_EmployeeID`
    FOREIGN KEY (`EmployeeID`)
    REFERENCES `EMPLOYEE` (`EmployeeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Intersecting table used to record a card assignment to eithe' /* comment truncated */ /*r a customer or employee*/;

CREATE INDEX `fk_CARD_ASSIGNMENT_EMPLOYEE1_idx` ON `CARD_ASSIGNMENT` (`EmployeeID` ASC);

DESCRIBE ROOM;
-- -----------------------------------------------------
-- Table `CARD_LOC_LOG`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CARD_LOC_LOG` ;

CREATE TABLE IF NOT EXISTS `CARD_LOC_LOG` (
  `CardNumber` INT NOT NULL COMMENT 'CardNumber of the Employee/Customer',
  `Timestamp` DATETIME NOT NULL COMMENT 'Time that the device was swiped',
  `RoomID` INT NOT NULL COMMENT 'RoomID (location) that the swipe occured',
  PRIMARY KEY (`CardNumber`, `Timestamp`),
  CONSTRAINT `CARD_LOC_LOG_CardNumber_FK`
    FOREIGN KEY (`CardNumber`)
    REFERENCES `CARD_ASSIGNMENT` (`CardNumber`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `CARD_LOC_LOG_RoomID_FK`
    FOREIGN KEY (`RoomID`)
    REFERENCES `ROOM` (`RoomID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Table is a transactional table used simply to record everyti' /* comment truncated */ /*me that a card is swiped.  This allows locations of staff and customers to be recorded*/;

CREATE INDEX `fk_CARD_LOC_LOG_CARD_ASSIGNMENT1_idx` ON `CARD_LOC_LOG` (`CardNumber` ASC);

CREATE INDEX `fk_CARD_LOC_LOG_ROOM1_idx` ON `CARD_LOC_LOG` (`RoomID` ASC);


-- -----------------------------------------------------
-- Table `BUILDING_WING_FEATURES`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BUILDING_WING_FEATURES` ;

CREATE TABLE IF NOT EXISTS `BUILDING_WING_FEATURES` (
  `BuildingID` INT NOT NULL,
  `WingID` INT NOT NULL,
  `FeatureID` INT NOT NULL COMMENT 'Lists the different features that the wing can have (Indoor Pool, Outdoor Pool, Loading Dock, etc.)',
  `ProximityID` INT NOT NULL COMMENT 'Values such as Adjacent, Near, Unavailable',
  PRIMARY KEY (`BuildingID`, `WingID`, `FeatureID`),
  CONSTRAINT `BUILDWING_FEATURES_BUILDING_WING_fk`
    FOREIGN KEY (`BuildingID` , `WingID`)
    REFERENCES `BUILDING_WING` (`BuildingID` , `WingID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `BUILDWING_FEATURES_FeatureID_fk`
    FOREIGN KEY (`FeatureID`)
    REFERENCES `TYPE_NAME` (`TypeNameID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `BUILDWING_FEATURES_ProximityID_fk`
    FOREIGN KEY (`ProximityID`)
    REFERENCES `TYPE_NAME` (`TypeNameID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB
COMMENT = 'Detail table of Building/Wing that allows the assignment of ' /* comment truncated */ /*multiple features such as indoor pool, outdoor pool, parking*/;

CREATE INDEX `fk_BUILDWING_FEATURES_TYPE_NAME1_idx` ON `BUILDING_WING_FEATURES` (`FeatureID` ASC);

CREATE INDEX `fk_BUILDWING_FEATURES_TYPE_NAME1_idx1` ON `BUILDING_WING_FEATURES` (`ProximityID` ASC);

USE `hollyhotel`;



/***************************************************************************************************************************************************************/
delimiter $$

/***************************************************************************************************************************************************************
VIEWS

****************************************************************************************************************************************************************/
DROP VIEW IF EXISTS StdCustomerInfoVw $$

CREATE VIEW StdCustomerInfoVw AS
select
c.CustomerID
, c.FirstName
, c.LastName
, c.contactInfoConfidential

, a0.Address1 as BillToAddress1
, a0.Address2 as BillToAddress2
, a0.Address3 as BillToAddress3
, a0.Address4 as BillToAddress4
, a0.City as BillToCity
, a0.State as BillToState
, a0.Zip as BillToZip
, a0.Country as BillToCountry

, p0.PhoneNum as BillToPhoneNum

from Customer c
join address a0 on a0.CustomerID=c.CustomerID and a0.AddressSeq = 0
join phone p0 on p0.CustomerID=c.CustomerID and p0.PhoneNumSeq = 0

where c.CustomerType = 'C'

; $$



/***************************************************************************************************************************************************************
STORED PROCEDURES

****************************************************************************************************************************************************************/
DROP PROCEDURE IF EXISTS `InsUpStdCustomerSp`; $$

CREATE PROCEDURE `InsUpStdCustomerSp` (
  CustomerID  INT
, FirstName varchar(30)
, LastName varchar(30) 
, ContactInfoconfidential tinyint

, BillToAddress1 VARCHAR(45)
, BillToAddress2 VARCHAR(45)
, BillToAddress3 VARCHAR(45)
, BillToAddress4 VARCHAR(45)
, BillToCity VARCHAR(45)
, BillToState VARCHAR(3)
, BillToZip   VARCHAR(10)
, BillToCountry VARCHAR(45)

, BillToPhoneNum VARCHAR(10)

)
BEGIN
	if FirstName is not null and LastName is not null then 
    Begin
		SET ContactInfoConfidential =IFNULL(ContactInfoConfidential,0);
        IF CustomerID is NULL THEN 
			BEGIN
            INSERT INTO CUSTOMER (FirstName, LastName, OrganizationName, ContactInfoConfidential) Values(FirstName, LastName, '', ContactInfoConfidential);
			SELECT LAST_INSERT_ID() into CustomerID;
            END;
		ELSE
			BEGIN
            UPDATE CUSTOMER as c SET 
						c.FirstName = Firstname
					   , c.LastName = LastName
                       , c.ContactInfoConfidential = ContactInfoConfidential
				where c.CustomerID = CustomerID;
			END;
        END IF; #CUSTOMERID IS NULL
		
		INSERT INTO Address (CustomerID, AddressSeq, Address1, Address2, Address3, Address4, City, State, Zip, Country) VALUES( CustomerID, 0, BillToAddress1, BillToAddress2, BillToAddress3, BillToAddress4, BillToCity, BillToState, BillToZip, BillToCountry)
			ON DUPLICATE KEY UPDATE
				Address1 = BillToAddress1,
                Address2 = BillToAddress2,
                Address3 = BillToAddress3,
                Address4 = BillToAddress4,
                City = BillToCity,
                State = BillToState,
                Zip = BillToZip,
                Country = BillToCountry
                ;
		
        INSERT INTO Phone(CustomerID, PhoneNumSeq, PhoneNum) VALUES(CustomerID,0,BillToPhoneNum) 
			ON DUPLICATE KEY UPDATE
            PhoneNum = BillToPhoneNum;
		End;
    
    end if;  # firstname/lastname
    
END; $$





/***************************************************************************************************************************************************************
TRIGGERS

****************************************************************************************************************************************************************/
USE `hollyhotel`$$
DROP TRIGGER IF EXISTS `BUILDING_WING_BEFORE_INSERT` $$
USE `hollyhotel`$$
CREATE TRIGGER `BUILDING_WING_BEFORE_INSERT` BEFORE INSERT ON `BUILDING_WING` 
  FOR EACH ROW
  BEGIN
	DECLARE msg varchar(255);
    
    IF NEW.BuildingID not in (select TypeNameID from TYPE_NAME where UsageID = 'BuildingID') then
		BEGIN
			SELECT IFNULL(`Name`,'') into msg from Type_Name where TypeNameID=NEW.BuildingID;
			SET msg = concat(msg, ' is not a valid Building');
			SIGNAL sqlstate '45000' SET message_text = msg;
		END; 
    ELSEIF NEW.WingID not in (select TypeNameID from TYPE_NAME where UsageID = 'WingID') then
		BEGIN
			SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.WingID;
			SET msg = concat(msg, ' is not a valid Proximity Type');
			SIGNAL sqlstate '45000' SET message_text = msg;
		END;
	END IF;
 END; 
$$

USE `hollyhotel`$$
DROP TRIGGER IF EXISTS `BUILDING_WING_BEFORE_UPDATE` $$
USE `hollyhotel`$$
CREATE TRIGGER `BUILDING_WING_BEFORE_UPDATE` BEFORE UPDATE ON `BUILDING_WING` 
  FOR EACH ROW
  BEGIN
	DECLARE msg varchar(255);
    
    IF NEW.BuildingID not in (select TypeNameID from TYPE_NAME where UsageID = 'BuildingID') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.BuildingID;
		SET msg = concat(msg, ' is not a valid Building');
		SIGNAL sqlstate '45000' SET message_text = msg;
	END; 
    ELSEIF NEW.WingID not in (select TypeNameID from TYPE_NAME where UsageID = 'WingID') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.WingID;
		SET msg = concat(msg, ' is not a valid Proximity Type');
		SIGNAL sqlstate '45000' SET message_text = msg;
    END;
 END IF;
 END; 
$$

USE `hollyhotel`$$
DROP TRIGGER IF EXISTS `RESERVATION_BEFORE_INSERT` $$
USE `hollyhotel`$$
CREATE TRIGGER `hollyhotel`.`RESERVATION_BEFORE_INSERT` BEFORE INSERT ON `RESERVATION` FOR EACH ROW
  BEGIN
	DECLARE msg varchar(255);
    
    IF NEW.RoomType not in (select TypeNameID from TYPE_NAME where UsageID = 'RoomType') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.RoomType;
		SET msg = concat(msg, ' is not a valid Room Type');
		SIGNAL sqlstate '45000' SET message_text = msg;
	END; 
    END IF;
 END; 
 $$


USE `hollyhotel`$$
DROP TRIGGER IF EXISTS `RESERVATION_BEFORE_UPDATE` $$
USE `hollyhotel`$$
CREATE TRIGGER `hollyhotel`.`RESERVATION_BEFORE_UPDATE` BEFORE UPDATE ON `RESERVATION` FOR EACH ROW
  BEGIN
	DECLARE msg varchar(255);
    
    IF NEW.RoomType not in (select TypeNameID from TYPE_NAME where UsageID = 'RoomType') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.RoomType;
		SET msg = concat(msg, ' is not a valid Room Type');
		SIGNAL sqlstate '45000' SET message_text = msg;
	END; 
    END IF;
 END; $$


USE `hollyhotel`$$
DROP TRIGGER IF EXISTS `ROOM_BEDS_BEFORE_INSERT` $$
USE `hollyhotel`$$
CREATE TRIGGER `ROOM_BEDS_BEFORE_INSERT` BEFORE INSERT ON `ROOM_BEDS` 
  FOR EACH ROW
  BEGIN
	DECLARE msg varchar(255);
    
    IF NEW.BedType not in (select TypeNameID from TYPE_NAME where UsageID = 'BedType') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.BedType;
		SET msg = concat(msg, ' is not a valid Bed Type');
		SIGNAL sqlstate '45000' SET message_text = msg;
	END; 
    
 END IF;
 END; 
    $$


USE `hollyhotel`$$
DROP TRIGGER IF EXISTS `ROOM_BEDS_BEFORE_UPDATE` $$
USE `hollyhotel`$$
CREATE TRIGGER `ROOM_BEDS_BEFORE_UPDATE` BEFORE UPDATE ON `ROOM_BEDS` 
  FOR EACH ROW
  BEGIN
	DECLARE msg varchar(255);
    
    IF NEW.BedType not in (select TypeNameID from TYPE_NAME where UsageID = 'BedType') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.BedType;
		SET msg = concat(msg, ' is not a valid Bed Type');
		SIGNAL sqlstate '45000' SET message_text = msg;
	END; 
    
 END IF;
 END; $$


USE `hollyhotel`$$
DROP TRIGGER IF EXISTS `ROOM_DETAIL_BEFORE_INSERT` $$
USE `hollyhotel`$$
CREATE TRIGGER `hollyhotel`.`ROOM_DETAIL_BEFORE_INSERT` BEFORE INSERT ON `ROOM_DETAIL` FOR EACH ROW
  BEGIN
	DECLARE msg varchar(255);
    
    IF NEW.RoomType not in (select TypeNameID from TYPE_NAME where UsageID = 'RoomType') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.RoomType;
		SET msg = concat(msg, ' is not a valid Room Type');
		SIGNAL sqlstate '45000' SET message_text = msg;
	END; 
    END IF;
 END; $$


USE `hollyhotel`$$
DROP TRIGGER IF EXISTS `ROOM_DETAIL_BEFORE_UPDATE` $$
USE `hollyhotel`$$
CREATE TRIGGER `hollyhotel`.`ROOM_DETAIL_BEFORE_UPDATE` BEFORE UPDATE ON `ROOM_DETAIL` FOR EACH ROW
  BEGIN
	DECLARE msg varchar(255);
    
    IF NEW.RoomType not in (select TypeNameID from TYPE_NAME where UsageID = 'RoomType') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.RoomType;
		SET msg = concat(msg, ' is not a valid Room Type');
		SIGNAL sqlstate '45000' SET message_text = msg;
	END; 
    END IF;
 END; 
 $$


USE `hollyhotel`$$
DROP TRIGGER IF EXISTS `RES_FEATURES_BEFORE_INSERT` $$
USE `hollyhotel`$$
CREATE TRIGGER `hollyhotel`.`RES_FEATURES_BEFORE_INSERT` BEFORE INSERT ON `RES_FEATURES` FOR EACH ROW
  BEGIN
	DECLARE msg varchar(255);
    
    IF NEW.BedFeatureID not in (select TypeNameID from TYPE_NAME where UsageID = 'BedType' or UsageID = 'FeatureID') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.BedFeatureID;
		SET msg = concat(msg, ' is not a valid Bed/Feature Type');
		SIGNAL sqlstate '45000' SET message_text = msg;
	END; 
   ELSEIF NEW.ProximityID not in (select TypeNameID from TYPE_NAME where UsageID = 'ProximityID') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.ProximityID;
		SET msg = concat(msg, ' is not a valid Proximity Type');
		SIGNAL sqlstate '45000' SET message_text = msg;
    END;
    END IF;
 END; $$


USE `hollyhotel`$$
DROP TRIGGER IF EXISTS `RES_FEATURES_BEFORE_UPDATE` $$
USE `hollyhotel`$$

CREATE TRIGGER `hollyhotel`.`RES_FEATURES_BEFORE_UPDATE` BEFORE UPDATE ON `RES_FEATURES` FOR EACH ROW
  BEGIN
	DECLARE msg varchar(255);
    
    IF NEW.BedFeatureID not in (select TypeNameID from TYPE_NAME where UsageID = 'BedType' or UsageID = 'FeatureID') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.BedFeatureID;
		SET msg = concat(msg, ' is not a valid Bed/Feature Type');
		SIGNAL sqlstate '45000' SET message_text = msg;
	END; 
   ELSEIF NEW.ProximityID not in (select TypeNameID from TYPE_NAME where UsageID = 'ProximityID') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.ProximityID;
		SET msg = concat(msg, ' is not a valid Proximity Type');
		SIGNAL sqlstate '45000' SET message_text = msg;
    END;
    END IF;
 END; $$


USE `hollyhotel`$$
DROP TRIGGER IF EXISTS `STAY_CHARGES_BEFORE_INSERT` $$
USE `hollyhotel`$$
CREATE TRIGGER `hollyhotel`.`STAY_CHARGES_BEFORE_INSERT` BEFORE INSERT ON `STAY_CHARGES` FOR EACH ROW
  BEGIN
	DECLARE msg varchar(255);
    
    IF NEW.ChargeType not in (select TypeNameID from TYPE_NAME where UsageID = 'ChargeType') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.ChargeType;
		SET msg = concat(msg, ' is not a valid Charge Type');
		SIGNAL sqlstate '45000' SET message_text = msg;
	END; 
    END IF;
 END; $$


USE `hollyhotel`$$
DROP TRIGGER IF EXISTS `STAY_CHARGES_BEFORE_UPDATE` $$
USE `hollyhotel`$$
CREATE TRIGGER `hollyhotel`.`STAY_CHARGES_BEFORE_UPDATE` BEFORE UPDATE ON `STAY_CHARGES` FOR EACH ROW
  BEGIN
	DECLARE msg varchar(255);
    
    IF NEW.ChargeType not in (select TypeNameID from TYPE_NAME where UsageID = 'ChargeType') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.ChargeType;
		SET msg = concat(msg, ' is not a valid Charge Type');
		SIGNAL sqlstate '45000' SET message_text = msg;
	END; 
    END IF;
 END; $$


USE `hollyhotel`$$
DROP TRIGGER IF EXISTS `MAINTENANCE_TICKET_BEFORE_INSERT` $$
USE `hollyhotel`$$
CREATE TRIGGER `hollyhotel`.`MAINTENANCE_TICKET_BEFORE_INSERT` BEFORE INSERT ON `MAINTENANCE_TICKET` FOR EACH ROW
  BEGIN
	DECLARE msg varchar(255);
    
    IF NEW.MaintenanceType not in (select TypeNameID from TYPE_NAME where UsageID = 'MaintenanceType') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.MaintenanceType;
		SET msg = concat(msg, ' is not a valid Maintenance Type');
		SIGNAL sqlstate '45000' SET message_text = msg;
	END; 
    ELSEIF IFNULL(NEW.EndDate,NEW.AnticipatedEndDate)<NEW.StartDate or NEW.AnticipatedEndDate<NEW.StartDate then
    BEGIN
		SET msg = concat('End date(s) must be greater than the Start Date/time of the maintenance');
		SIGNAL sqlstate '45000' SET message_text = msg;
    END;
 END IF;
 END; $$


USE `hollyhotel`$$
DROP TRIGGER IF EXISTS `MAINTENANCE_TICKET_BEFORE_UPDATE` $$
USE `hollyhotel`$$
CREATE TRIGGER `hollyhotel`.`MAINTENANCE_TICKET_BEFORE_UPDATE` BEFORE UPDATE ON `MAINTENANCE_TICKET` FOR EACH ROW
  BEGIN
	DECLARE msg varchar(255);
    
    IF NEW.MaintenanceType not in (select TypeNameID from TYPE_NAME where UsageID = 'MaintenanceType') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.MaintenanceType;
		SET msg = concat(msg, ' is not a valid Maintenance Type');
		SIGNAL sqlstate '45000' SET message_text = msg;
	END; 
    ELSEIF IFNULL(NEW.EndDate,NEW.AnticipatedEndDate)<NEW.StartDate or NEW.AnticipatedEndDate<NEW.StartDate then
    BEGIN
		SET msg = concat('End date(s) must be greater than the Start Date/time of the maintenance');
		SIGNAL sqlstate '45000' SET message_text = msg;
    END;
 END IF;
 END; $$


USE `hollyhotel`$$
DROP TRIGGER IF EXISTS `BUILDWING_FEATURES_BEFORE_INSERT` $$
USE `hollyhotel`$$
CREATE TRIGGER `BUILDWING_FEATURES_BEFORE_INSERT` BEFORE INSERT ON `BUILDING_WING_FEATURES` 
  FOR EACH ROW
  BEGIN
	DECLARE msg varchar(255);
    
    IF NEW.FeatureID not in (select TypeNameID from TYPE_NAME where UsageID = 'FeatureID') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.FeatureID;
		SET msg = concat(msg, ' is not a valid Wing Feature');
		SIGNAL sqlstate '45000' SET message_text = msg;
	END; 
    ELSEIF NEW.ProximityID not in (select TypeNameID from TYPE_NAME where UsageID = 'ProximityID') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.ProximityID;
		SET msg = concat(msg, ' is not a valid Proximity Type');
		SIGNAL sqlstate '45000' SET message_text = msg;
    END; #elseif
 END IF;
 END; 

    $$


USE `hollyhotel`$$
DROP TRIGGER IF EXISTS `BUILDWING_FEATURES_BEFORE_UPDATE` $$
USE `hollyhotel`$$
CREATE TRIGGER `BUILDWING_FEATURES_BEFORE_UPDATE` BEFORE UPDATE ON `BUILDING_WING_FEATURES` 
  FOR EACH ROW
  BEGIN
	DECLARE msg varchar(255);
    
    IF NEW.FeatureID not in (select TypeNameID from TYPE_NAME where UsageID = 'FeatureID') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.FeatureID;
		SET msg = concat(msg, ' is not a valid Wing Feature');
		SIGNAL sqlstate '45000' SET message_text = msg;
	END; 
    ELSEIF NEW.ProximityID not in (select TypeNameID from TYPE_NAME where UsageID = 'ProximityID') then
    BEGIN
		SELECT IFNULL(`Name`,'')  INTO msg from Type_Name where TypeNameID=NEW.ProximityID;
		SET msg = concat(msg, ' is not a valid Proximity Type');
		SIGNAL sqlstate '45000' SET message_text = msg;
    END;
 END IF;
 END; $$


DELIMITER ;



